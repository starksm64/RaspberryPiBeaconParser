import org.jboss.summit2015.beacon.Beacon;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import java.util.List;
import java.util.Properties;

/**
 * Pulls in raw readings from the rawHeartbeatEvents queue data generated by the scanner running in
 * run-batteryTest.sh mode and averages them into 60 second windows
 * @author Scott Stark (sstark@redhat.com) (C) 2014 Red Hat Inc.
 */
public class AvgBatteryTestQueue {
   private static final String USER = "guest";
   private static final String PASSWORD = "guest";


   public static void main(String[] args) throws Exception {
      String destinationName = "rawHeartbeatEvents";
      // Local connection
      Properties props = new Properties();
      props.setProperty(InitialContext.INITIAL_CONTEXT_FACTORY, "org.apache.qpid.jms.jndi.JmsInitialContextFactory");
      props.setProperty("connectionfactory.myFactoryLookup", "amqp://192.168.1.107:5672");
      Context context = new InitialContext(props);
      ConnectionFactory factory = (ConnectionFactory) context.lookup("myFactoryLookup");
      Connection connection = factory.createConnection(USER, PASSWORD);
      connection.start();
      Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
      System.out.printf("Connected to broker\n");
      Destination destination = session.createQueue(destinationName);
      Destination avgDestination = session.createQueue(destinationName + "_60");
      averageReadings(session, destination, avgDestination);
      session.close();
      connection.close();
   }

   private static void send(List<Beacon> avgs, Session session, MessageProducer producer) throws JMSException {
      Beacon avg = avgs.get(0);
      Message out = session.createTextMessage();
      Utils.populateMessage(out, avg);
      producer.send(out);
   }
   private static void averageReadings(Session session, Destination destination, Destination avgDestination) throws Exception {
      MessageConsumer consumer = session.createConsumer(destination);
      MessageProducer producer = session.createProducer(avgDestination);
      EventsWindow window = new EventsWindow(60);
      int consumed = 0;
      int produced = 0;

      Message msg = consumer.receive();
      while(msg != null) {
         consumed ++;
         Beacon beacon = Utils.extractBeacon(msg);
         List<Beacon> avgs = window.addEvent(beacon);
         if(avgs != null) {
            send(avgs, session, producer);
            produced ++;
         }
         if(consumed % 10000 == 0)
            System.out.printf("In: %d, out: %d\n", consumed, produced);
         msg = consumer.receive(10000);
      }
      if(window.size() > 0) {
         List<Beacon> avgs = window.doAverage();
         send(avgs, session, producer);
         produced ++;
      }
      System.out.printf("Done, consumed=%d, produced=%d\n", consumed, produced);
   }
}

