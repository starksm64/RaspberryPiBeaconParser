apply plugin: 'java'
apply plugin: org.jboss.modules.gradle.JBossModulesPlugin

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':core')
    compile 'com.beust:jcommander:1.35'
    compile 'org.eclipse.paho:mqtt-client:0.4.0'
    compile "org.jboss.logging:jboss-logging:3.1.4.GA"
    compile 'org.jboss.logmanager:jboss-logmanager:1.5.4.Final'
    compile 'com.jcraft:jsch:0.1.51'
    compile 'com.google.code.gson:gson:2.3.1'

    //compile gradleApi()
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

ext.commandString = { List<String> cmdLine->
    StringBuilder info = new StringBuilder();
    for (String s : cmdLine) {
        info.append(s);
        info.append(' ');
    }
    return info.toString();
}

/*
task exeJar(type: org.jboss.modules.gradle.JBossModulesTask, dependsOn: classes) {
    println("exeJar configuration setting mainClass:\n")
    mainClass = 'org.jboss.summit2015.beacon.bluez.HCIDump'

    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Dependencies': 'org.jboss.logmanager, com.buest.jcommander'
    }
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    archiveName = "${project.archivesBaseName}-exe.jar"
}
*/
tasks.withType(Jar) {
    eachFile { FileCopyDetails details ->
        printf("name=%s, relative=%s\n", details.name, details.relativePath)
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Exec Jar File Example',
                'Implementation-Version': version,
                'Dependencies': 'org.jboss.logmanager, com.buest.jcommander'
    }
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
            it
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    archiveName = "${project.archivesBaseName}-exe.jar"
}


task runJavaScannerHCIDump(type: JavaExec, dependsOn: classes) {
    main = 'org.jboss.summit2015.beacon.bluez.HCIDump'
    systemProperty "java.library.path", "/usr/local/lib"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
runJavaScannerHCIDump.doFirst {
    println(commandString(commandLine))
    println("Output:\n")
}

task runJavaScanner(type: JavaExec, dependsOn: classes) {
    main = 'org.jboss.summit2015.beacon.scannerjni.Main'
    systemProperty "java.library.path", "/usr/local/lib"
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
runJavaScanner.doFirst {
    println(commandString(commandLine))
    println("Output:\n")
}

task runTestUptime(type: JavaExec, dependsOn: testClasses) {
    main = 'TestUptime'
    classpath sourceSets.test.runtimeClasspath
}
